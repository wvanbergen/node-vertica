// Generated by CoffeeScript 1.9.3
var AuthenticationMethods, BackendMessage, messageClass, name, typeOIDs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AuthenticationMethods = require('./authentication').methods;

typeOIDs = require('./types').typeOIDs;

BackendMessage = (function() {
  BackendMessage.prototype.typeId = null;

  function BackendMessage(buffer) {
    this.read(buffer);
  }

  BackendMessage.prototype.read = function(buffer) {};

  return BackendMessage;

})();

BackendMessage.Authentication = (function(superClass) {
  extend(Authentication, superClass);

  function Authentication() {
    return Authentication.__super__.constructor.apply(this, arguments);
  }

  Authentication.prototype.typeId = 82;

  Authentication.prototype.read = function(buffer) {
    this.method = buffer.readUInt32BE(0);
    if (this.method === AuthenticationMethods.MD5_PASSWORD) {
      return this.salt = buffer.readUInt32BE(4);
    } else if (this.method === AuthenticationMethods.CRYPT_PASSWORD) {
      return this.salt = buffer.readUInt16BE(4);
    }
  };

  return Authentication;

})(BackendMessage);

BackendMessage.BackendKeyData = (function(superClass) {
  extend(BackendKeyData, superClass);

  function BackendKeyData() {
    return BackendKeyData.__super__.constructor.apply(this, arguments);
  }

  BackendKeyData.prototype.typeId = 75;

  BackendKeyData.prototype.read = function(buffer) {
    this.pid = buffer.readUInt32BE(0);
    return this.key = buffer.readUInt32BE(4);
  };

  return BackendKeyData;

})(BackendMessage);

BackendMessage.ParameterStatus = (function(superClass) {
  extend(ParameterStatus, superClass);

  function ParameterStatus() {
    return ParameterStatus.__super__.constructor.apply(this, arguments);
  }

  ParameterStatus.prototype.typeId = 83;

  ParameterStatus.prototype.read = function(buffer) {
    this.name = buffer.readZeroTerminatedString(0);
    return this.value = buffer.readZeroTerminatedString(this.name.length + 1);
  };

  return ParameterStatus;

})(BackendMessage);

BackendMessage.NotificationResponse = (function(superClass) {
  extend(NotificationResponse, superClass);

  function NotificationResponse() {
    return NotificationResponse.__super__.constructor.apply(this, arguments);
  }

  NotificationResponse.prototype.typeId = 65;

  NotificationResponse.prototype.read = function(buffer) {
    this.pid = buffer.readUInt32BE(4);
    this.channel = buffer.readZeroTerminatedString(4);
    return this.payload = buffer.readZeroTerminatedString(this.channel.length + 5);
  };

  return NotificationResponse;

})(BackendMessage);

BackendMessage.EmptyQueryResponse = (function(superClass) {
  extend(EmptyQueryResponse, superClass);

  function EmptyQueryResponse() {
    return EmptyQueryResponse.__super__.constructor.apply(this, arguments);
  }

  EmptyQueryResponse.prototype.typeId = 73;

  return EmptyQueryResponse;

})(BackendMessage);

BackendMessage.RowDescription = (function(superClass) {
  extend(RowDescription, superClass);

  function RowDescription() {
    return RowDescription.__super__.constructor.apply(this, arguments);
  }

  RowDescription.prototype.typeId = 84;

  RowDescription.prototype.read = function(buffer) {
    var fieldDescriptor, formatCode, i, j, modifier, name, numberOfFields, pos, ref, size, tableFieldIndex, tableOID, typeOID;
    numberOfFields = buffer.readUInt16BE(0);
    pos = 2;
    this.columns = [];
    for (i = j = 0, ref = numberOfFields; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      name = buffer.readZeroTerminatedString(pos);
      pos += Buffer.byteLength(name) + 1;
      tableOID = buffer.readUInt32BE(pos);
      pos += 4;
      tableFieldIndex = buffer.readUInt16BE(pos);
      pos += 2;
      typeOID = buffer.readUInt32BE(pos);
      pos += 4;
      size = buffer.readUInt16BE(pos);
      pos += 2;
      modifier = buffer.readUInt32BE(pos);
      pos += 4;
      formatCode = buffer.readUInt16BE(pos);
      pos += 2;
      fieldDescriptor = {
        name: name,
        tableOID: tableOID,
        tableFieldIndex: tableFieldIndex,
        typeOID: typeOID,
        type: typeOIDs[typeOID],
        size: size,
        modifier: modifier,
        formatCode: formatCode
      };
      this.columns.push(fieldDescriptor);
    }
    return void 0;
  };

  return RowDescription;

})(BackendMessage);

BackendMessage.DataRow = (function(superClass) {
  extend(DataRow, superClass);

  function DataRow() {
    return DataRow.__super__.constructor.apply(this, arguments);
  }

  DataRow.prototype.typeId = 68;

  DataRow.prototype.read = function(buffer) {
    var data, i, j, length, numberOfFields, pos, ref;
    numberOfFields = buffer.readUInt16BE(0);
    pos = 2;
    this.values = [];
    for (i = j = 0, ref = numberOfFields; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      length = buffer.readUInt32BE(pos);
      pos += 4;
      if (length === 4294967295) {
        data = null;
      } else {
        data = buffer.slice(pos, pos + length);
        pos += length;
      }
      this.values.push(data);
    }
    return void 0;
  };

  return DataRow;

})(BackendMessage);

BackendMessage.CommandComplete = (function(superClass) {
  extend(CommandComplete, superClass);

  function CommandComplete() {
    return CommandComplete.__super__.constructor.apply(this, arguments);
  }

  CommandComplete.prototype.typeId = 67;

  CommandComplete.prototype.read = function(buffer) {
    return this.status = buffer.readZeroTerminatedString(0);
  };

  return CommandComplete;

})(BackendMessage);

BackendMessage.CloseComplete = (function(superClass) {
  extend(CloseComplete, superClass);

  function CloseComplete() {
    return CloseComplete.__super__.constructor.apply(this, arguments);
  }

  CloseComplete.prototype.typeId = 51;

  return CloseComplete;

})(BackendMessage);

BackendMessage.ParameterDescription = (function(superClass) {
  extend(ParameterDescription, superClass);

  function ParameterDescription() {
    return ParameterDescription.__super__.constructor.apply(this, arguments);
  }

  ParameterDescription.prototype.typeId = 116;

  ParameterDescription.prototype.read = function(buffer) {
    var count, i;
    count = buffer.readUInt16BE(0);
    return this.parameterTypes = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(buffer.readUInt32BE(2 + i * 4));
      }
      return results;
    })();
  };

  return ParameterDescription;

})(BackendMessage);

BackendMessage.ParseComplete = (function(superClass) {
  extend(ParseComplete, superClass);

  function ParseComplete() {
    return ParseComplete.__super__.constructor.apply(this, arguments);
  }

  ParseComplete.prototype.typeId = 49;

  return ParseComplete;

})(BackendMessage);

BackendMessage.ErrorResponse = (function(superClass) {
  extend(ErrorResponse, superClass);

  function ErrorResponse() {
    return ErrorResponse.__super__.constructor.apply(this, arguments);
  }

  ErrorResponse.prototype.typeId = 69;

  ErrorResponse.prototype.fieldNames = {
    83: 'Severity',
    67: 'Code',
    77: 'Message',
    68: 'Detail',
    72: 'Hint',
    80: 'Position',
    112: 'Internal position',
    113: 'Internal query',
    87: 'Where',
    70: 'File',
    76: 'Line',
    82: 'Routine'
  };

  ErrorResponse.prototype.read = function(buffer) {
    var fieldCode, pos, value;
    this.information = {};
    fieldCode = buffer.readUInt8(0);
    pos = 1;
    while (fieldCode !== 0x00) {
      value = buffer.readZeroTerminatedString(pos);
      this.information[this.fieldNames[fieldCode] || fieldCode] = value;
      pos += Buffer.byteLength(value) + 1;
      fieldCode = buffer.readUInt8(pos);
      pos += 1;
    }
    return this.message = this.information['Message'];
  };

  return ErrorResponse;

})(BackendMessage);

BackendMessage.NoticeResponse = (function(superClass) {
  extend(NoticeResponse, superClass);

  function NoticeResponse() {
    return NoticeResponse.__super__.constructor.apply(this, arguments);
  }

  NoticeResponse.prototype.typeId = 78;

  return NoticeResponse;

})(BackendMessage.ErrorResponse);

BackendMessage.ReadyForQuery = (function(superClass) {
  extend(ReadyForQuery, superClass);

  function ReadyForQuery() {
    return ReadyForQuery.__super__.constructor.apply(this, arguments);
  }

  ReadyForQuery.prototype.typeId = 90;

  ReadyForQuery.prototype.read = function(buffer) {
    return this.transactionStatus = buffer.readUInt8(0);
  };

  return ReadyForQuery;

})(BackendMessage);

BackendMessage.CopyFileResponse = (function(superClass) {
  extend(CopyFileResponse, superClass);

  function CopyFileResponse() {
    return CopyFileResponse.__super__.constructor.apply(this, arguments);
  }

  CopyFileResponse.prototype.typeId = 70;

  CopyFileResponse.prototype.read = function(buffer) {
    var filename, i, j, last, numberOfFiles, pos, ref;
    this.files = [];
    numberOfFiles = buffer.readUInt16BE(0);
    pos = 2;
    for (i = j = 0, ref = numberOfFiles; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      filename = buffer.readZeroTerminatedString(pos);
      this.files.push(filename);
      pos += filename.length + 1;
    }
    return last = buffer.readUInt16BE(pos);
  };

  return CopyFileResponse;

})(BackendMessage);

BackendMessage.CopyInResponse = (function(superClass) {
  extend(CopyInResponse, superClass);

  function CopyInResponse() {
    return CopyInResponse.__super__.constructor.apply(this, arguments);
  }

  CopyInResponse.prototype.typeId = 71;

  CopyInResponse.prototype.read = function(buffer) {
    var i, j, numberOfFields, pos, ref;
    this.globalFormatType = buffer.readUInt8(0);
    this.fieldFormatTypes = [];
    numberOfFields = buffer.readUInt16BE(1);
    pos = 3;
    for (i = j = 0, ref = numberOfFields; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      this.fieldFormatTypes.push(buffer.readUInt8(pos));
      pos += 1;
    }
    return void 0;
  };

  return CopyInResponse;

})(BackendMessage);

BackendMessage.types = {};

for (name in BackendMessage) {
  messageClass = BackendMessage[name];
  if (messageClass.prototype && (messageClass.prototype.typeId != null)) {
    messageClass.prototype.event = name;
    BackendMessage.types[messageClass.prototype.typeId] = messageClass;
  }
}

BackendMessage.fromBuffer = function(buffer) {
  var message, typeId;
  typeId = buffer.readUInt8(0);
  messageClass = BackendMessage.types[typeId];
  if (messageClass != null) {
    message = new messageClass(buffer.slice(5));
    return message;
  } else {
    throw new Error("Unknown message type: " + typeId);
  }
};

module.exports = BackendMessage;
